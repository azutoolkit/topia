require "../../src/topia"

class Generator < Topia::BasePlugin
  def run(input, args = [] of String)
    announce "Generating Endpoint!"

    # Extract parameters from args
    return false if args.size < 4

    name, route, request, response = args[0], args[1], args[2], args[3]
    method, path = route.split(":")

    # Convert names to proper case
    endpoint_name = name.split(/[-_]/).map(&.capitalize).join("")
    request_name = request.split(/[-_]/).map(&.capitalize).join("")
    response_name = response.split(/[-_]/).map(&.capitalize).join("")

    File.open("./playground/endpoints/#{name.downcase.gsub(/[-_]/, "")}.cr", "w") do |file|
      file.puts <<-CONTENT
# Generated by Topia Endpoint Generator
# Endpoint: #{endpoint_name}
# Route: #{method.upcase} #{path}

class #{endpoint_name}Endpoint
  include Azu::Endpoint(#{request_name}, #{response_name})

  #{method.downcase} "#{path}"

  def call : #{response_name}
    # TODO: Implement endpoint logic
    #{response_name}.new
  end
end
CONTENT
    end

    success "Done Generating Endpoint: #{endpoint_name}!"
    true
  end

  def on(event : String)
    case event
    when "pre_run"
      announce "Starting endpoint generation..."
    when "after_run"
      success "Endpoint generation completed!"
    when "error"
      error "Endpoint generation failed!"
    end
  end
end
